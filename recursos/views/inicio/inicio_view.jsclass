view_index = {
	Extends : View,
	Persist : true,
	nodos : [],
	extentZonas: {},
	init : function() {
		this.getTheme('inicio');
	},
	features : {},
	menu : {},
	render : function(response) {
		var idleTime = 0;
		$(document).addEvent('mousemove',function (e) {
	        idleTime = 0;
	    });
		$(document).addEvent('keypress',function (e) {
	        idleTime = 0;
	    });
		var iddle = function(){
			idleTime = idleTime + 1;
		    if (idleTime > 4) { // 20 minutes
		    	idleTime = 4;
		    	this.drawTree('all');
		    }
		}.periodical(60000,this);
		this.appendView(response);
		$('headerFertilizacionLogo').addEvent('click', function() {
			this.drawTree('all');
		}.bind(this));
		$('headerBotonFoto').addEvent('click', function() {
			this.drawTree('image');
		}.bind(this));
		$('headerBotonVideo').addEvent('click', function() {
			this.drawTree('video');
		}.bind(this));

		$('footerMapa01').addEvent('click', function() {
			this.zoomToMapZone();
		}.bind(this));
		$('footerMapa02').addEvent('click', function() {
			this.zoomToMapZone([ 5,7,6 ]);
		}.bind(this));
		$('footerMapa03').addEvent('click', function() {
			this.zoomToMapZone([ 6 ]);
		}.bind(this));
		this.resize();
		this.gotoNextFX = new Fx.Scroll('app');
		this.getDatas({
			'hospitales' : 'cartografia/hospitales.geojson',
			'zonas' : 'cartografia/zonas.geojson',
			'departamentos' : 'cartografia/departamentos.geojson',
			'argentina' : 'cartografia/argentina.geojson',
			'sudamerica' : 'cartografia/sudamerica.geojson'
		}, 'renderMapa');
		this.getData('menu.json', 'renderNodos');
	},
	resize : function() {
		var size = document.body.getSize();
		$('app').setStyles({
			'height' : size.y - 329
		});
		$('nodos').setStyles({
			'height' : size.y - 329
		});
		$('mapa').setStyles({
			'height' : size.y - 329
		});
	},
	renderNodos : function(responses) {
		var menu = JSON.parse(responses.response);
		var size = $('nodos').getSize();
		this.actual = 'nodos';
		this.canvas = $('nodos').getElement('canvas');
		this.ctx = this.canvas.getContext('2d');
		window.addEvent('resize', this.resizeCanvas.bind(this));
		this.resizeCanvas();
		this.sys = arbor.ParticleSystem(1000, 600, 0.5, false, 55, 0.02, 2);
		this.sys.screenSize(this.canvas.width, this.canvas.height);
		this.sys.screenPadding(250) // leave an extra 80px of
		this.sys.renderer = {
			init : function() {
				console.log('arranca engine');
			},
			redraw : function() {
				this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
				this.sys.eachNode(function(node, pt) {
					node.data.model.setCenter(pt);
				});
			}.bind(this)
		}
		this.sys.screenSize(size.x, size.y);
		this.sys.screenPadding(149, 100, 180, 100);
		var options = {
			canvas : this.canvas,
			sys : this.sys
		};
		this.allTree = this.getModel((menu.all.type) ? menu.all.type
				: 'itemMenu', Object.merge(options, menu.all));
		this.videoTree = this.getModel((menu.videos.type) ? menu.videos.type
				: 'itemMenu', Object.merge(options, menu.videos));
		this.imagesTree = this.getModel((menu.images.type) ? menu.images.type
				: 'itemMenu', Object.merge(options, menu.images));
		this.allTree.setParent(false);
		this.videoTree.setParent(false);
		this.imagesTree.setParent(false);
		this.drawTree('all');
	},
	drawTree : function(type) {
		this.gotoNodos();
		var tree;
		switch (type) {
		case 'all':
			tree = this.allTree;
			break;
		case 'video':
			tree = this.videoTree;
			break;
		case 'image':
			tree = this.imagesTree;
			break;
		}
		if (this.prevTree)
			this.prevTree.hide();
		tree.draw();
		tree.drawChilds();
		this.prevTree = tree;
	},
	zoomToMapZone : function(zona) {
		this.gotoMapas();
		if (zona) {
			var aux = new OpenLayers.Bounds();
			zona.each(function(id) {
				console.log('zoom',zona,this.extentZonas[id],id);
				aux.extend(this.extentZonas[id])
			}.bind(this))
			this.mapa.zoomToExtent(aux, true);
		} else {
			this.mapa.zoomToMaxExtent();
		}
	},
	renderMapa : function(responses) {
		this.parserWKT = new OpenLayers.Format.WKT();
		this.parserGeoJSON = new OpenLayers.Format.GeoJSON();
		var context = {
			getProvinciaColor : function(feature) {
				var color;
				switch (parseInt(feature.attributes.SALUD
						|| feature.attributes.salud)) {
				case 1:// BahiBlanca
					color = 'FF9966';
					break;
				case 2:// Paguaho
					color = 'FFCC99';
					break;
				case 3:// Junin
					color = '33CCCC';
					break;
				case 4:// Pergamino
					color = 'FFFF00';
					break;
				case 5:// San Isidro
					color = 'CCCC66';
					break;
				case 6:// Lomas de zamora
					color = 'CCCCCC';
					break;
				case 7:// General Rodriguez
					color = '996666';
					break;
				case 8:// Mar del Plata
					color = '9475B2';
					break;
				case 9:// Azul
					color = '33CC66';
					break;
				case 10:// Chibilcoi
					color = 'EEEEEE';
					break;
				case 11:// La Plata
					color = 'F59275';
					break;
				case 12:// La Matanza
					color = 'CC9966';
					break;
				default:
					color = 'CCCCCC';
					break;
				}
				return '#' + color;
			},
			getAmericaColor : function(feature) {
				if (feature.attributes.code == 'AR') {
					return "#FFFFFF";
				} else {
					return "#CCCCCC";
				}
			},
			getArgLabel : function(feature) {
				return feature.attributes.NOMBRE;
			},
			getRoman : function(feature) {
				console.log('getRoman', arguments);
				return feature.attributes.salud.toRoman();
			},
			getLabel : function(feature) {
				feature.attributes.label
				if (feature.attributes.label == "Sin dato"
						|| feature.attributes.label == "BUENOS AIRES") {
					if (feature.attributes.label == "Sin dato")
						return "San Fernando \n Islas"
					else
						return "";
				} else if (feature.attributes.label) {
					return feature.attributes.label.replace(" ", "\n");
				} else {
					return "";
				}
			},
			getFontSize : function(feature) {
				var response = 0;
				switch (map.getZoom()) {
				case 3:
					if (feature.geometry.getArea() < 200508972)
						response = 6
					else
						response = 10;
					break;
				case 4:
					if (feature.geometry.getArea() < 403702171)
						response = 8
					else
						response = 13;
					break;
				}
				return response + "px";
			},
			iconoHospital : function(feature) {
				if (feature.attributes.COMPLEJIDA == 'A')
					return "images/incono_AltaComplejidad.png"
				else
					return "images/incono_BajaComplejidad.png";

			},
			colorHospital : function(feature) {
				if (feature.attributes.COMPLEJIDA == 'A')
					return "#FF0000"
				else
					return "#00FF00";
			}
		};

		var zonas = new OpenLayers.Style({
			fillColor : "${getProvinciaColor}",
			labelAlign : "cm",
			label : "${getLabel}",
			fontSize : "${getFontSize}",
			fontColor : "#000000",
			fontFamily : "Arial",
			fontWeight : "Bold",
			strokeColor : "#000000",
			strokeWidth : 0.5,
			labelOutlineColor : "#FFFFFF",
			labelOutlineWidth : 0
		}, {
			context : context
		});

		var america = new OpenLayers.Style({
			fillColor : "#CCCCCC",
			fontColor : "#000000",
			strokeColor : "#000000",
			strokeWidth : 0.1,
			labelAlign : "cm",
			label : "${getLabel}"
		}, {
			context : context
		});

		var argentina = new OpenLayers.Style({
			fillColor : "#FFFFFF",
			fontColor : "#000000",
			strokeColor : "#000000",
			strokeWidth : 0.1,
			labelAlign : "cm",
			label : "${getArgLabel}"
		}, {
			context : context
		});

		this.maxBound = new OpenLayers.Bounds();

		this.hospitales = {
			capa : new OpenLayers.Layer.Vector("Hospitales", {
				styleMap : new OpenLayers.StyleMap(new OpenLayers.Style({
							externalGraphic : '${iconoHospital}',
							graphicXOffset : -5,
							graphicYOffset : -5,
							graphicWidth : 10,
							graphicHeight : 10,
							fill : false,
							stroke : false,
							graphicZIndex : 5000,
							graphicOpacity : 1,
							label: ""
						}, {
					context : context
				})),
				renderers : [ "Canvas" ]
			}),
			features : this.parserGeoJSON.read(responses.hospitales.response)
		};
		this.hospitales.capa.addFeatures(this.hospitales.features);

		this.zonas = {
			capa : new OpenLayers.Layer.Vector("zonas", {
				styleMap : new OpenLayers.StyleMap(zonas),
				renderers : [ "Canvas" ]
			}),
			features : this.parserGeoJSON
					.read(responses.departamentos.response)
		};
		this.zonas.capa.addFeatures(this.zonas.features);

		this.contornos = {
			capa : new OpenLayers.Layer.Vector("Zonas Agrupadas", {
				styleMap : new OpenLayers.StyleMap(new OpenLayers.Style({
							fill : true,
							fillColor : "${getProvinciaColor}",
							fillOpacity : 0.1,
							stroke : true,
							strokeColor : "#000000",
							strokeWidth : 2,
							strokeOpacity : 1,
							strokeDashstyle : 'longdashdot',
							strokeLinecap : "round",
							fontColor: "#000000",
							fontFamily: "Arial",
							fontWeight: 'bolder',
							fontSize: '16px',
							label : "${getRoman}",
							labelAlign : "cm"
						}, {
					context : context
				})),
				renderers : [ "Canvas" ]
			}),
			features : this.parserGeoJSON.read(responses.zonas.response)
		};
		this.contornos.features.each(function(feature) {
			this.contornos.capa.addFeatures([ feature ]);
//			this.features[feature.attributes.indice] = feature.geometry
//					.getBounds();
			this.extentZonas[feature.attributes.salud] = feature.geometry.getBounds();
			this.maxBound.extend(feature.geometry.getBounds());
		}.bind(this));
		//this.contornos.capa.addFeatures(this.contornos.features);

		this.zonasAgrupadasHover = {
			capa : new OpenLayers.Layer.Vector("Zonas Agrupadas Hover", {
				styleMap : new OpenLayers.StyleMap(new OpenLayers.Style(Object
						.merge(OpenLayers.Feature.Vector.style['select'], {
							fillColor : "${getProvinciaColor}",
							fill : true,
							fillOpacity : 0.01,
							cursor : "url('images/cursor01.png'), pointer",
							stroke : false
						}), {
					context : context
				})),
				renderers : [ "SVG" ]
			}),
			features : this.parserGeoJSON.read(responses.zonas.response)
		};
		this.zonasAgrupadasHover.capa
				.addFeatures(this.zonasAgrupadasHover.features);
		this.argentina = {
			capa : new OpenLayers.Layer.Vector("argentina", {
				styleMap : new OpenLayers.StyleMap(argentina),
				renderers : [ "Canvas" ]
			}),
			features : this.parserGeoJSON.read(responses.argentina.response)
		};
		this.argentina.capa.addFeatures(this.argentina.features);
		this.america = {
			capa : new OpenLayers.Layer.Vector("america", {
				styleMap : new OpenLayers.StyleMap(america),
				renderers : [ "Canvas" ]
			}),
			features : this.parserGeoJSON.read(responses.sudamerica.response)
		};
		this.america.features.each(function(feature) {
			feature.attributes.label = feature.data.NAME;
			this.america.capa.addFeatures([ feature ]);
		}.bind(this));

		var counter = 0;

		this.zonasAgrupadasHover.capa.events.on({
			"featureselected" : function(e) {
				console.log(e);
				var feature = e.feature;
				var image = Asset.image('images/zonas/Zona'
						+ feature.attributes.salud + '.png', {
					onLoad : function() {
						jQuery.fancybox({
							'overlayColor' : '#000',
							'content' : image
						});
					}
				});

			}
		});

		this.panZoom = OpenLayers.Class(OpenLayers.Control.PanZoom, {
			draw : function(px) {
				// initialize our internal div
				OpenLayers.Control.prototype.draw.apply(this, arguments);
				px = this.position;

				// place the controls
				this.buttons = [];

				var sz = {
					w : 50,
					h : 50
				};
				var centered = new OpenLayers.Pixel(px.x + sz.w / 2, px.y);

				this._addButton("panup", "images/controles/bt_arriba.gif",
						centered, sz);
				px.y = centered.y + sz.h;
				this._addButton("panleft", "images/controles/bt_izquierda.gif",
						px, sz);
				this._addButton("panright", "images/controles/bt_derecha.gif",
						px.add(sz.w, 0), sz);
				this._addButton("pandown", "images/controles/bt_abajo.gif",
						centered.add(0, sz.h * 2), sz);
				this._addButton("zoomin", "images/controles/bt_mas.gif",
						centered.add(0, sz.h * 3 + 5), sz);
				this._addButton("zoomworld", "images/controles/bt_extend.gif",
						centered.add(0, sz.h * 4 + 5), sz);
				this._addButton("zoomout", "images/controles/bt_menos.gif",
						centered.add(0, sz.h * 5 + 5), sz);
				return this.div;
			},
			_addButton : function(id, img, xy, sz) {
				var imgLocation = img;
				var btn = OpenLayers.Util.createAlphaImageDiv(this.id + "_"
						+ id, xy, sz, imgLocation, "absolute");
				btn.style.cursor = "pointer";
				// we want to add the outer div
				this.div.appendChild(btn);
				btn.action = id;
				btn.className = "olButton";

				// we want to remember/reference the outer div
				this.buttons.push(btn);
				return btn;
			},
			CLASS_NAME : "k1.panZoom"
		});

		this.mapa = new OpenLayers.Map('mapa', {
			projection : 'EPSG:900913',
			baseLayer : this.america.capa,
			panMethod : false,
			controls : [ new this.panZoom(),
					new OpenLayers.Control.TouchNavigation({
						dragPanOptions : {
							enableKinetic : true
						}
					}) ],
			maxExtent : this.maxBound,
			restrictedExtent : this.maxBound,
			numZoomLevels : 5
		});

		this.mapa.addLayers([ this.america.capa, this.argentina.capa,
				this.zonas.capa, this.contornos.capa, this.hospitales.capa,
				this.zonasAgrupadasHover.capa ]);
		// this.mapa.addLayer(this.hospitales.capa);
		// this.mapa.setLayerZIndex(this.hospitales.capa, 200);
		// this.mapa.setLayerZIndex(this.zonasAgrupadas.capa, 300);
		// mecanismo ap
		// this.mapa.addControl(new OpenLayers.Control.MousePosition());
		// this.mapa.events.register("mousemove", this.mapa, function(e) {
		// console.log( "MOUSE:"+this.events.getMousePosition(e));

		// var position = this.events.getMousePosition(e);
		// OpenLayers.Util.getElement("coords").innerHTML =
		// position;
		// });

		window['map'] = this.mapa;
		// this.mapa.addLayers(this.america.capa,this.zonas.capa,this.zonasAgrupadas.capa,this.hospitales.capa);
		this.america.capa.setVisibility(true);
		this.zonas.capa.setVisibility(true);
		this.contornos.capa.setVisibility(true);
		this.hospitales.capa.setVisibility(true);
		this.zonasAgrupadasHover.capa.setVisibility(true);
		this.selectControl = new OpenLayers.Control.SelectFeature(
				this.zonasAgrupadasHover.capa, {
					clickout : true,
					toggle : false,
					multiple : false,
					hover : false,

				});
		// this.mapa.addControl(this.selectControl);
		// this.mapa.addControl(highlightCtrl);
		// this.selectControl.activate();
		// highlightCtrl.activate();
		/**
		 * TEST
		 */
		var report = function(e) {
			OpenLayers.Console.log(e.type, e.feature.id);
		};
		var highlightCtrl = new OpenLayers.Control.SelectFeature(
				this.zonasAgrupadasHover.capa,
				{
					hover : true,
					highlightOnly : true,
					renderIntent : "temporary",
					// selectStyle : Object.merge(
					// //OpenLayers.Feature.Vector.style['default'], {
					// {
					//								
					// }),
					eventListeners : {
						// beforefeaturehighlighted : ,
						featurehighlighted : function(ev) {
							console.log('beforefeaturehighlighted', arguments);
							var style = {
												fill : true,
												fillColor : context.getProvinciaColor(ev.feature),
												fillOpacity : 0.9,
												cursor : "url('images/cursor01.png'), pointer",
												stroke : true,
												strokeColor : "#000000",
												strokeWidth : 6,
												strokeOpacity : 1,
												strokeDashstyle : 'solid',
												strokeLinecap : "round",
												graphic: false,
												fontFamily: "Arial",
												fontWeight: 'bolder',
												fontSize: '16px',
												label: context.getRoman(ev.feature)
											};
							this.zonasAgrupadasHover.capa.drawFeature(
									ev.feature, style);
						}.bind(this),
//						featureunhighlighted : report
					}
				});

		var selectCtrl = new OpenLayers.Control.SelectFeature(
				this.zonasAgrupadasHover.capa, {
					clickout : true
				});

		this.mapa.addControl(highlightCtrl);
		this.mapa.addControl(selectCtrl);

		highlightCtrl.activate();
		selectCtrl.activate();
		/**
		 * END TEST
		 */
		this.mapa.zoomToMaxExtent();

	},
	resizeCanvas : function() {
		var size = $('nodos').getSize();
		this.canvas.setProperties({
			width : size.x,
			height : size.y
		});
	},
	gotoMapas : function() {
		this.gotoNextFX.toBottom();
	},
	gotoNodos : function() {
		this.gotoNextFX.toTop();
	}
}
