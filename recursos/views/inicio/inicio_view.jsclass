view_index = {
	Extends : View,
	Persist : true,
	nodos : [],
	init : function() {
		this.getTheme('inicio');
	},
	features : {},
	menu : {},
	render : function(response) {
		this.appendView(response);
		$('headerFertilizacionLogo').addEvent('click', function() {
			this.drawTree('all');
		}.bind(this));
		$('headerBotonFoto').addEvent('click', function() {
			this.drawTree('image');
		}.bind(this));
		$('headerBotonVideo').addEvent('click', function() {
			this.drawTree('video');
		}.bind(this));

		$('footerMapa01').addEvent('click', function() {
			this.zoomToMapZone();
		}.bind(this));
		$('footerMapa02').addEvent('click', function() {
			this.zoomToMapZone([ 172, 174, 57, 112 ]);
		}.bind(this));
		$('footerMapa03').addEvent('click', function() {
			this.zoomToMapZone([ 26 ]);
		}.bind(this));
		this.resize();
		this.gotoNextFX = new Fx.Scroll('app');
		this.getDatas({
			'zonas' : 'zonas.geojson',
			'zonasAgrupadas' : 'zonasAgrupadas.geojson',
			'hospitales' : 'hospitales.geojson',
			'america' : 'arg_unificada.geojson'
		}, 'renderMapa');
		this.getData('menu.json', 'renderNodos');
	},
	resize : function() {
		var size = document.body.getSize();
		$('app').setStyles({
			'height' : size.y - 329
		});
		$('nodos').setStyles({
			'height' : size.y - 329
		});
		$('mapa').setStyles({
			'height' : size.y - 329
		});
	},
	renderNodos : function(responses) {
		var menu = JSON.parse(responses.response);
		var size = $('nodos').getSize();
		this.actual = 'nodos';
		this.canvas = $('nodos').getElement('canvas');
		this.ctx = this.canvas.getContext('2d');
		window.addEvent('resize', this.resizeCanvas.bind(this));
		this.resizeCanvas();
		this.sys = arbor.ParticleSystem(1000, 600, 0.5, false, 55, 0.02, 2);
		this.sys.screenSize(this.canvas.width, this.canvas.height);
		this.sys.screenPadding(250) // leave an extra 80px of
		this.sys.renderer = {
			init : function() {
				console.log('arranca engine');
			},
			redraw : function() {
				this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
				this.sys.eachNode(function(node, pt) {
					node.data.model.setCenter(pt);
				});
			}.bind(this)
		}
		this.sys.screenSize(size.x, size.y);
		this.sys.screenPadding(149, 100, 180, 100);
		var options = {
			canvas : this.canvas,
			sys : this.sys
		};
		this.allTree = this.getModel((menu.all.type) ? menu.all.type
				: 'itemMenu', Object.merge(options, menu.all));
		this.videoTree = this.getModel((menu.videos.type) ? menu.videos.type
				: 'itemMenu', Object.merge(options, menu.videos));
		this.imagesTree = this.getModel((menu.images.type) ? menu.images.type
				: 'itemMenu', Object.merge(options, menu.images));
		this.allTree.setParent(false);
		this.videoTree.setParent(false);
		this.imagesTree.setParent(false);
		this.drawTree('all');
	},
	drawTree : function(type) {
		this.gotoNodos();
		var tree;
		switch (type) {
		case 'all':
			tree = this.allTree;
			break;
		case 'video':
			tree = this.videoTree;
			break;
		case 'image':
			tree = this.imagesTree;
			break;
		}
		if (this.prevTree)
			this.prevTree.hide();
		tree.draw();
		tree.drawChilds();
		this.prevTree = tree;
	},
	loadMapa : function(responses) {

		this.parser = new OpenLayers.Format.WKT();
		new Request.JSON({
			url : './mapa.json',
			onSuccess : this.renderMapa.bind(this)
		}).get();
	},
	zoomToMapZone : function(zona) {
		this.gotoMapas();
		if (zona) {
			var aux = new OpenLayers.Bounds();
			zona.each(function(id) {
				aux.extend(this.features[id])
			}.bind(this))
			this.mapa.zoomToExtent(aux, true);
		} else {
			this.mapa.zoomToMaxExtent();
		}
	},
	renderMapa : function(responses) {
		this.parserWKT = new OpenLayers.Format.WKT();
		this.parserGeoJSON = new OpenLayers.Format.GeoJSON();
		this.baseLayer = new OpenLayers.Layer.Vector("Contorno Provincia.");
		var context = {
			getProvinciaColor : function(feature) {
				var color;
				switch (parseInt(feature.attributes.zona)) {
				case 1:// BahiBlanca
					color = 'FF9966';
					break;
				case 2:// Paguaho
					color = 'FFCC99';
					break;
				case 3:// Junin
					color = '33CCCC';
					break;
				case 4:// Pergamino
					color = 'FFFF00';
					break;
				case 5:// San Isidro
					color = 'CCCC66';
					break;
				case 6:// Lomas de zamora
					color = 'CCCCCC';
					break;
				case 7:// General Rodriguez
					color = '996666';
					break;
				case 8:// Mar del Plata
					color = '9475B2';
					break;
				case 9:// Azul
					color = '33CC66';
					break;
				case 10:// Chibilcoi
					color = 'EEEEEE';
					break;
				case 11:// La Plata
					color = 'F59275';
					break;
				case 12:// La Matanza
					color = 'CC9966';
					break;
				default:
					color = 'CCCCCC';
					break;
				}
				return '#' + color;
			},
			getAmericaColor : function(feature) {
				if (feature.attributes.code == 'AR') {
					return "#FFFFFF";
				} else {
					return "#CCCCCC";
				}
			},
			getLabel : function(feature) {
				if (feature.attributes.label == "Sin dato"
						|| feature.attributes.label == "BUENOS AIRES") {
					if (feature.attributes.label == "Sin dato")
						return "San Fernando \n Islas"
					else
						return "";
				} else if (feature.attributes.label) {
					return feature.attributes.label.replace(" ", "\n");
				} else {
					return "";
				}
			},
			getFontSize : function(feature) {
				var response = 0;
				switch (map.getZoom()) {
				case 3:
					if (feature.geometry.getArea() < 200508972)
						response = 6
					else
						response = 10;
					break;
				case 4:
					if (feature.geometry.getArea() < 403702171)
						response = 8
					else
						response = 13;
					break;
				}
				return response + "px";
			},
			iconoHospital : function(feature) {
				if (feature.attributes.COMPLEJIDA == 'A')
					return "star"
				else
					return "triangle";

			},
			colorHospital : function(feature) {
				if (feature.attributes.COMPLEJIDA == 'A')
					return "#FF0000"
				else
					return "#00FF00";
			}
		};

		var zonas = new OpenLayers.Style({
			fillColor : "${getProvinciaColor}",
			labelAlign : "cm",
			label : "${getLabel}",
			fontSize : "${getFontSize}",
			fontColor : "#000000",
			fontFamily : "Arial",
			fontWeight : "Bold",
			stroke : false,
			labelOutlineColor : "#FFFFFF",
			labelOutlineWidth : 0
		}, {
			context : context
		});

		var zonasAgrupadas = new OpenLayers.Style(Object.merge(
				OpenLayers.Feature.Vector.style['select'], {
					fill : true,
					fillOpacity: 0.01,
					cursor: "url('images/cursor01.png'), pointer",
					stroke : false
				}), {
			context : context
		});

		var america = new OpenLayers.Style({
			fillColor : "#CCCCCC",
			fontColor : "#000000",
			strokeColor : "#000000",
			strokeWidth : 0.1,
			labelAlign : "cm",
			label : "${getLabel}"
		}, {
			context : context
		});

		var hospitales = new OpenLayers.Style(Object.merge(
				OpenLayers.Feature.Vector.style['default'], {
					graphicName : '${iconoHospital}',
					fillOpacity : 1,
					fillColor : '#FFFFFF',
					strokeColor : "#000000",
					strokeWidth : 0.5,
					pointRadius : 8
				}), {
			context : context
		});

		this.maxBound = new OpenLayers.Bounds();

		this.hospitales = {
			capa : new OpenLayers.Layer.Vector("Hospitales", {
				styleMap : new OpenLayers.StyleMap(hospitales),
				renderers : [ "Canvas" ]
			}),
			features : this.parserGeoJSON.read(responses.hospitales.response)
		};
		this.hospitales.capa.addFeatures(this.hospitales.features);

		this.zonas = {
			capa : new OpenLayers.Layer.Vector("zonas", {
				styleMap : new OpenLayers.StyleMap(zonas),
				renderers : [ "Canvas" ]
			}),
			features : this.parserGeoJSON.read(responses.zonas.response)
		};
		this.zonas.features.each(function(feature) {
			this.zonas.capa.addFeatures([ feature ]);
			this.features[feature.attributes.indice] = feature.geometry
					.getBounds();
			this.maxBound.extend(feature.geometry.getBounds());
		}.bind(this));

		this.zonasAgrupadas = {
			capa : new OpenLayers.Layer.Vector("Zonas Agrupadas", {
				styleMap : new OpenLayers.StyleMap(zonasAgrupadas),
				renderers : [ "SVG" ]
			}),
			features : this.parserGeoJSON
					.read(responses.zonasAgrupadas.response)
		};
		this.zonasAgrupadas.capa.addFeatures(this.zonasAgrupadas.features);
		this.america = {
			capa : new OpenLayers.Layer.Vector("america", {
				styleMap : new OpenLayers.StyleMap(america),
				renderers : [ "Canvas" ]
			}),
			features : this.parserGeoJSON.read(responses.america.response)
		};
		this.america.features.each(function(feature) {
			feature.attributes.label = feature.data.NAME;
			this.america.capa.addFeatures([ feature ]);
		}.bind(this));

		var counter = 0;

		this.zonasAgrupadas.capa.events.on({
			"featureselected" : function(e) {
				var feature = e.feature;
				var image = Asset.image('images/zonas/Zona' + feature.attributes.zona
						+ '.png', {
					onLoad : function() {
						jQuery.fancybox({
							'overlayColor' : '#000',
							'content' : image
						});
					}
				});

			}
		});

		this.panZoom = OpenLayers.Class(OpenLayers.Control.PanZoom, {
			draw : function(px) {
				// initialize our internal div
				OpenLayers.Control.prototype.draw.apply(this, arguments);
				px = this.position;

				// place the controls
				this.buttons = [];

				var sz = {
					w : 50,
					h : 50
				};
				var centered = new OpenLayers.Pixel(px.x + sz.w / 2, px.y);

				this._addButton("panup", "images/controles/bt_arriba.gif",
						centered, sz);
				px.y = centered.y + sz.h;
				this._addButton("panleft", "images/controles/bt_izquierda.gif",
						px, sz);
				this._addButton("panright", "images/controles/bt_derecha.gif",
						px.add(sz.w, 0), sz);
				this._addButton("pandown", "images/controles/bt_abajo.gif",
						centered.add(0, sz.h * 2), sz);
				this._addButton("zoomin", "images/controles/bt_mas.gif",
						centered.add(0, sz.h * 3 + 5), sz);
				this._addButton("zoomworld", "images/controles/bt_extend.gif",
						centered.add(0, sz.h * 4 + 5), sz);
				this._addButton("zoomout", "images/controles/bt_menos.gif",
						centered.add(0, sz.h * 5 + 5), sz);
				return this.div;
			},
			_addButton : function(id, img, xy, sz) {
				var imgLocation = img;
				var btn = OpenLayers.Util.createAlphaImageDiv(this.id + "_"
						+ id, xy, sz, imgLocation, "absolute");
				btn.style.cursor = "pointer";
				// we want to add the outer div
				this.div.appendChild(btn);
				btn.action = id;
				btn.className = "olButton";

				// we want to remember/reference the outer div
				this.buttons.push(btn);
				return btn;
			},
			CLASS_NAME : "k1.panZoom"
		});

		this.mapa = new OpenLayers.Map('mapa', {
			projection : 'EPSG:900913',
			baseLayer : this.america.capa,
			panMethod : false,
			controls : [ new this.panZoom(),
					new OpenLayers.Control.TouchNavigation({
						dragPanOptions : {
							enableKinetic : true
						}
					}) ],
			maxExtent : this.maxBound,
			restrictedExtent : this.maxBound,
			numZoomLevels : 5
		});

		this.mapa.addLayers([ this.america.capa, this.zonas.capa, this.hospitales.capa, this.zonasAgrupadas.capa ]);
		// this.mapa.addLayer(this.hospitales.capa);
		// this.mapa.setLayerZIndex(this.hospitales.capa, 200);
		// this.mapa.setLayerZIndex(this.zonasAgrupadas.capa, 300);
		// mecanismo ap
		// this.mapa.addControl(new OpenLayers.Control.MousePosition());
		// this.mapa.events.register("mousemove", this.mapa, function(e) {
		// console.log( "MOUSE:"+this.events.getMousePosition(e));

		// var position = this.events.getMousePosition(e);
		// OpenLayers.Util.getElement("coords").innerHTML =
		// position;
		// });

		window['map'] = this.mapa;
		// this.mapa.addLayers(this.america.capa,this.zonas.capa,this.zonasAgrupadas.capa,this.hospitales.capa);
		this.america.capa.setVisibility(true);
		this.zonas.capa.setVisibility(true);
		this.zonasAgrupadas.capa.setVisibility(true);
		this.hospitales.capa.setVisibility(true);
		this.selectControl = new OpenLayers.Control.SelectFeature(
				this.zonasAgrupadas.capa, {
					clickout : true,
					toggle : false,
					multiple : false,
					hover : false,

				});
		this.mapa.addControl(this.selectControl);
		this.selectControl.activate();
		this.mapa.zoomToMaxExtent();

		/*
		 * 
		 * 
		 * var features = new Array(12);
		 * 
		 * var createNewFeature = function (label,long,lat) { return new
		 * OpenLayers.Feature.Vector( new OpenLayers.Geometry.Point(long,lat), {
		 * 
		 * name: "mystic label:"+label, } ); };
		 * 
		 * 
		 * 
		 * featuresZonaLabel[2] = createNewFeature("03",-6856760.19954,
		 * -4130095.86961); featuresZonaLabel[3] =
		 * createNewFeature("04",-6706547.23123, -4020961.91611);
		 * featuresZonaLabel[4] = createNewFeature("05",-6556255.70402,
		 * -4056012.23694); featuresZonaLabel[5] =
		 * createNewFeature("06",-6495473.05945, -4133680.56151);
		 * featuresZonaLabel[6] = createNewFeature("07",-6567166.89751,
		 * -4124917.98130); featuresZonaLabel[7] =
		 * createNewFeature("08",-6502268.49557, -4497593.17289);
		 * featuresZonaLabel[8] = createNewFeature("09",-6721067.46804,
		 * -4395628.60319); featuresZonaLabel[9] =
		 * createNewFeature("10",-6671225.87302, -4188247.53826);
		 * featuresZonaLabel[10] = createNewFeature("11",-6468889.93003,
		 * -4231263.84110); featuresZonaLabel[11] =
		 * createNewFeature("12",-6526771.64587, -4133033.32547);
		 */

		/*
		 * 
		 * 
		 * //AD REGION LABEL LAYER
		 * 
		 * var featuresZonaLabel = new Array(12);
		 * 
		 * var createNewFeature = function (label,long,lat) { return new
		 * OpenLayers.Feature.Vector( new OpenLayers.Geometry.Point(long,lat), {
		 * 
		 * name: "mystic label:"+label, } ); }
		 * 
		 * 
		 * featuresZonaLabel[0] = createNewFeature("01",-6951289.85270,
		 * -4587874.30230); featuresZonaLabel[1] =
		 * createNewFeature("02",-6970408.20951, -4267110.76014);
		 * featuresZonaLabel[2] = createNewFeature("03",-6856760.19954,
		 * -4130095.86961); featuresZonaLabel[3] =
		 * createNewFeature("04",-6706547.23123, -4020961.91611);
		 * featuresZonaLabel[4] = createNewFeature("05",-6556255.70402,
		 * -4056012.23694); featuresZonaLabel[5] =
		 * createNewFeature("06",-6495473.05945, -4133680.56151);
		 * featuresZonaLabel[6] = createNewFeature("07",-6567166.89751,
		 * -4124917.98130); featuresZonaLabel[7] =
		 * createNewFeature("08",-6502268.49557, -4497593.17289);
		 * featuresZonaLabel[8] = createNewFeature("09",-6721067.46804,
		 * -4395628.60319); featuresZonaLabel[9] =
		 * createNewFeature("10",-6671225.87302, -4188247.53826);
		 * featuresZonaLabel[10] = createNewFeature("11",-6468889.93003,
		 * -4231263.84110); featuresZonaLabel[11] =
		 * createNewFeature("12",-6526771.64587, -4133033.32547);
		 * 
		 * 
		 * 
		 * var labelsLayer = new OpenLayers.Layer.Vector("Labels Layer", {
		 * styleMap: new OpenLayers.StyleMap({'default':{ strokeColor:
		 * "#000000", strokeOpacity: 0.5, strokeWidth: 0, fillColor: "#0ff000",
		 * fillOpacity: 1, pointRadius: 3, pointerEvents: "visiblePainted", //
		 * label with \n linebreaks label : "${name}",
		 * 
		 * fontColor: "${favColor}", fontSize: "12px", fontFamily: "Arial",
		 * fontWeight: "bold", labelAlign: "${align}", labelXOffset:
		 * "${xOffset}", labelYOffset: "${yOffset}", labelOutlineColor: "white",
		 * labelOutlineWidth: 3 }}),
		 * 
		 * }); labelsLayer.addFeatures(featuresZonaLabel);
		 * this.mapa.addLayer(labelsLayer);
		 * 
		 * 
		 * 
		 */

	},
	resizeCanvas : function() {
		var size = $('nodos').getSize();
		this.canvas.setProperties({
			width : size.x,
			height : size.y
		});
	},
	gotoMapas : function() {
		this.gotoNextFX.toBottom();
	},
	gotoNodos : function() {
		this.gotoNextFX.toTop();
	}
}
