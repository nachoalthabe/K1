view_index = {
	Extends : View,
	Persist : true,
	nodos : [],
	init : function() {
		this.getTheme('inicio');
	},
	features : {},
	menu : {},
	render : function(response) {
		this.appendView(response);
		$('headerFertilizacionLogo').addEvent('click', function() {
			this.drawTree('all');
		}.bind(this));
		$('headerBotonFoto').addEvent('click', function() {
			this.drawTree('image');
		}.bind(this));
		$('headerBotonVideo').addEvent('click', function() {
			this.drawTree('video');
		}.bind(this));

		$('footerMapa01').addEvent('click', function() {
			this.zoomToMapZone();
		}.bind(this));
		$('footerMapa02').addEvent('click', function() {
			this.zoomToMapZone([ 172, 174, 57, 112 ]);
		}.bind(this));
		$('footerMapa03').addEvent('click', function() {
			this.zoomToMapZone(26);
		}.bind(this));
		this.resize();
		this.gotoNextFX = new Fx.Scroll('app');
		this.getDatas({
			'provincia' : 'mapa.json',
			'america' : 'arg_unificada.geojson'
		}, 'renderMapa');
		this.getData('menu.json', 'renderNodos');
	},
	resize : function() {
		var size = document.body.getSize();
		$('app').setStyles({
			'height': size.y - 329
		});
		$('mapa').setStyles({
			'height': size.y - 329
		});
	},
	renderNodos : function(responses) {
		var menu = JSON.parse(responses.response);
		var appSize = $('app').getSize();
		this.actual = 'nodos';
		this.canvas = $('nodos').getElement('canvas');
		this.ctx = this.canvas.getContext('2d');
		window.addEvent('resize', this.resizeCanvas.bind(this));
		this.resizeCanvas();
		this.sys = arbor.ParticleSystem(1000, 600, 0.5);
		this.sys.parameters({
			stiffness : 10,
			repulsion : 100,
			gravity : true,
			dt : 0.055
		});
		this.sys.screenSize(this.canvas.width, this.canvas.height);
		this.sys.screenPadding(250) // leave an extra 80px of
		this.sys.renderer = {
			init : function() {

			},
			redraw : function() {
				this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
				this.sys.eachNode(function(node, pt) {
					node.data.model.setCenter(pt);
				});
			}.bind(this)
		}
		var options = {
			canvas : this.canvas,
			sys : this.sys
		};
		this.allTree = this.getModel((menu.all.type) ? menu.all.type
				: 'itemMenu', Object.merge(options, menu.all));
		this.videoTree = this.getModel((menu.videos.type) ? menu.videos.type
				: 'itemMenu', Object.merge(options, menu.videos));
		this.imagesTree = this.getModel((menu.images.type) ? menu.images.type
				: 'itemMenu', Object.merge(options, menu.images));
		this.allTree.setParent(false);
		this.videoTree.setParent(false);
		this.imagesTree.setParent(false);
		this.drawTree('all');
	},
	drawTree : function(type) {
		this.gotoNodos();
		var tree;
		switch (type) {
		case 'all':
			tree = this.allTree;
			break;
		case 'video':
			tree = this.videoTree;
			break;
		case 'image':
			tree = this.imagesTree;
			break;
		}
		if (this.prevTree)
			this.prevTree.hide();
		tree.draw();
		tree.drawChilds();
		this.prevTree = tree;
	},
	loadMapa : function(responses) {

		this.parser = new OpenLayers.Format.WKT();
		new Request.JSON({
			url : './mapa.json',
			onSuccess : this.renderMapa.bind(this)
		}).get();
	},
	zoomToMapZone : function(zona) {
		this.gotoMapas();
		if (!zona)
			this.mapa.zoomToMaxExtent()
		else if (typeof zona == 'Array' || typeof zona == 'object') {
			var bounds = new OpenLayers.Bounds();
			zona.each(function(z) {
				bounds.extend(this.features[z].geometry.getBounds());
			}.bind(this));
			this.mapa.zoomToExtent(bounds);
		} else
			this.mapa.zoomToExtent(this.features[zona].geometry.getBounds());
	},
	renderMapa : function(responses) {
		this.parserWKT = new OpenLayers.Format.WKT();
		this.parserGeoJSON = new OpenLayers.Format.GeoJSON();
		this.baseLayer = new OpenLayers.Layer.Vector("Contorno Provincia.");
		var context = {
			getProvinciaColor : function(feature) {
				var color;
				switch (parseInt(feature.zona)) {
				case 1:// BahiBlanca
					color = 'FF9966';
					break;
				case 2:// Paguaho
					color = 'FFCC99';
					break;
				case 3:// Junin
					color = '33CCCC';
					break;
				case 4:// Pergamino
					color = 'FFFF00';
					break;
				case 5:// San Isidro
					color = 'CCCC66';
					break;
				case 6:// Lomas de zamora
					color = 'CCCCCC';
					break;
				case 7:// General Rodriguez
					color = '996666';
					break;
				case 8:// Mar del Plata
					color = '9475B2';
					break;
				case 9:// Azul
					color = '33CC66';
					break;
				case 10:// Chibilcoi
					color = 'FFFFFF';
					break;
				case 11:// La Plata
					color = 'F59275';
					break;
				case 12:// La Matanza
					color = 'CC9966';
					break;
				default:
					color = 'CCCCCC';
					break;
				}
				return '#' + color;
			},
			getAmericaColor : function(feature) {
				if (feature.code == 'AR') {
					return "#FFFFFF";
				} else {
					return "#CCCCCC";
				}
			},
			getLabel : function(feature) {
				if (feature.label == "Sin dato") {
					return ""
				} else {
					return feature.label;
				}
			},
			getFontSize : function(feature) {
				var response = 13;
				switch (map.getZoom()) {
				case 0:
					response = 0
					break;
				case 1:
					if (feature.geometry.getArea() > 5592970815)
						response = 10
					else
						response = 0
					break;
				case 2:
					if (feature.geometry.getArea() > 5592970815)
						response = 12
					else
						response = 0
					break;
				case 3:
					if (feature.geometry.getArea() > 454019898)
						response = 12
					else
						response = 0
					break;
				case 4:
					if (feature.geometry.getArea() < 97864966)
						response = 8
					else
						response = 13
				}
				return response + "px";
			}
		};
		var template = {
			fillColor : "${getProvinciaColor}",
			labelAlign : "c",
			label : "${getLabel}",
			fontSize : "${getFontSize}",
			fontColor : "#000000"
		};

		var mapa = {
			fillColor : "${getAmericaColor}",
			fontColor : "#000000",
			strokeColor : "#000000",
			strokeWidth : 1,
			labelAlign : "c",
			label : "${getLabel}"
		};

		var style = new OpenLayers.Style(template, {
			context : context
		});

		var style2 = new OpenLayers.Style(mapa, {
			context : context
		});

		this.provincia = new OpenLayers.Layer.Vector("Provincia", {
			styleMap : new OpenLayers.StyleMap(style),
			renderers : [ "Canvas" ]
		});

		this.america = new OpenLayers.Layer.Vector("America", {
			styleMap : new OpenLayers.StyleMap(style2),
			renderers : [ "Canvas" ]
		});

		this.provincia.events.on({
			"featureselected" : function(e) {
				var feature = e.feature;
				console.log(feature.zona, feature.indice)
				console.log(feature.geometry.getArea(), map.getZoom());
				var image = Asset.image('images/zona' + 11 + '.png', {
					onLoad : function() {
						jQuery.fancybox({
							'overlayColor' : '#000',
							'content' : image
						});
					}
				});

			}
		});
		var geoms = {};
		var maxBound = new OpenLayers.Bounds();
		var geometry;
		var mapas = JSON.parse(responses.provincia.response);
		var resto = this.parserGeoJSON.read(responses.america.response);
		mapas.departamentos_base.data
				.each(function(departamento, indice) {
					if (departamento[4] == "BUENOS AIRES") {
						geometry = this.parserWKT
								.read(mapas.departamentos_base.geom[indice][0]).geometry;
						var feature = new OpenLayers.Feature.Vector(geometry);
						maxBound.extend(feature.geometry.getBounds());
						feature.indice = indice;
						feature.zona = this.zonas[indice];
						feature.label = departamento[1];
						this.features[indice] = feature;

						this.provincia.addFeatures([ feature ]);
					}
				}.bind(this));
		var paises = {};
		resto.each(function(elem) {
			// vector = new OpenLayers.Feature.Vector(elem);
			elem.label = elem.data.NAME;
			this.america.addFeatures([ elem ]);
		}.bind(this));
		// http://stackoverflow.com/questions/4254228/openlayers-pan-zoom-bar-modification
		this.panZoom = OpenLayers.Class(OpenLayers.Control.PanZoom, {
			draw : function(px) {
				// initialize our internal div
				OpenLayers.Control.prototype.draw.apply(this, arguments);
				px = this.position;

				// place the controls
				this.buttons = [];

				var sz = {
					w : 49,
					h : 49
				};
				var centered = new OpenLayers.Pixel(px.x + sz.w / 2, px.y);

				this._addButton("panup", "images/controles/bt_arriba.gif",
						centered, sz);
				px.y = centered.y + sz.h;
				this._addButton("panleft", "images/controles/bt_izquierda.gif",
						px, sz);
				this._addButton("panright", "images/controles/bt_derecha.gif",
						px.add(sz.w, 0), sz);
				this._addButton("pandown", "images/controles/bt_abajo.gif",
						centered.add(0, sz.h * 2), sz);
				this._addButton("zoomin", "images/controles/bt_mas.gif",
						centered.add(0, sz.h * 3 + 5), sz);
				this._addButton("zoomworld", "images/controles/bt_extend.gif",
						centered.add(0, sz.h * 4 + 5), sz);
				this._addButton("zoomout", "images/controles/bt_menos.gif",
						centered.add(0, sz.h * 5 + 5), sz);
				return this.div;
			},
			_addButton : function(id, img, xy, sz) {
				var imgLocation = img;
				var btn = OpenLayers.Util.createAlphaImageDiv(this.id + "_"
						+ id, xy, sz, imgLocation, "absolute");
				btn.style.cursor = "pointer";
				// we want to add the outer div
				this.div.appendChild(btn);
				btn.action = id;
				btn.className = "olButton";

				// we want to remember/reference the outer div
				this.buttons.push(btn);
				return btn;
			},
			CLASS_NAME : "k1.panZoom"
		});
		this.mapa = new OpenLayers.Map('mapa', {
			projection : 'EPSG:900913',
			baseLayer : this.america,
			panMethod : false,
			controls : [ new this.panZoom() ],
			maxExtent : maxBound,
			restrictedExtent : maxBound,
			numZoomLevels : 4
		});
		window['map'] = this.mapa;
		this.mapa.addLayer(this.america);
		this.mapa.addLayer(this.provincia);
		this.america.setVisibility(true);
		this.selectControl = new OpenLayers.Control.SelectFeature(
				this.provincia, {
					clickout : true,
					toggle : false,
					multiple : false,
					hover : false,

				});
		this.mapa.addControl(this.selectControl);
		this.selectControl.activate();
		this.mapa.zoomToMaxExtent();
	},
	resizeCanvas : function() {
		var size = $('app').getSize();
		this.canvas.setProperties({
			width : size.x,
			height : size.y
		});
	},
	gotoMapas : function() {
		this.gotoNextFX.toBottom();
	},
	gotoNodos : function() {
		this.gotoNextFX.toTop();
	},
	zonas : {
		"0" : 1,
		"1" : 1,
		"3" : 1,
		"4" : 1,
		"5" : 2,
		"6" : 2,
		"7" : 3,
		"8" : 3,
		"9" : 3,
		"10" : 3,
		"11" : 3,
		"12" : 3,
		"13" : 8,
		"14" : 2,
		"15" : 2,
		"16" : 8,
		"17" : 2,
		"18" : 2,
		"20" : 11,
		"22" : 11,
		"25" : 11,
		"26" : 11,
		"27" : 9,
		"28" : 11,
		"29" : 10,
		"30" : 11,
		"31" : 10,
		"32" : 3,
		"33" : 4,
		"34" : 4,
		"35" : 4,
		"36" : 3,
		"37" : 11,
		"38" : 10,
		"39" : 10,
		"40" : 10,
		"41" : 10,
		"42" : 10,
		"43" : 4,
		"44" : 4,
		"45" : 4,
		"46" : 4,
		"47" : 4,
		"48" : 4,
		"49" : 4,
		"50" : 4,
		"51" : 4,
		"52" : 4,
		"53" : 10,
		"54" : 7,
		"55" : 7,
		"56" : 6,
		"57" : 7,
		"58" : 11,
		"59" : 7,
		"60" : 7,
		"61" : 7,
		"62" : 12,
		"63" : 6,
		"64" : 6,
		"65" : 7,
		"67" : 5,
		"72" : 5,
		"74" : 5,
		"75" : 5,
		"86" : 5,
		"88" : 2,
		"90" : 5,
		"91" : 2,
		"95" : false,
		"96" : 8,
		"97" : 5,
		"98" : 8,
		"99" : 8,
		"100" : 8,
		"101" : 11,
		"102" : 11,
		"103" : 8,
		"104" : 11,
		"105" : 11,
		"106" : 8,
		"107" : 8,
		"108" : 8,
		"109" : 1,
		"110" : 8,
		"111" : 6,
		"112" : 6,
		"113" : 6,
		"124" : 2,
		"128" : 9,
		"139" : 9,
		"142" : 1,
		"143" : 1,
		"147" : 1,
		"148" : 1,
		"149" : 9,
		"150" : 1,
		"151" : 9,
		"152" : 2,
		"153" : 1,
		"154" : 1,
		"155" : 1,
		"156" : 2,
		"157" : 1,
		"158" : 1,
		"159" : 5,
		"160" : 8,
		"161" : 9,
		"162" : 8,
		"163" : 9,
		"164" : 8,
		"165" : 9,
		"166" : 9,
		"167" : 10,
		"168" : 10,
		"169" : 8,
		"170" : 9,
		"171" : 8,
		"172" : 5,
		"173" : 7,
		"174" : 11,
		"175" : 11,
		"176" : 6,
		"177" : 2,
		"178" : 7,
		"179" : 5,
		"180" : 7,
		"181" : 5,
		"182" : 5,
		"183" : 5,
		"184" : 11,
		"185" : 11,
		"186" : 6,
		"187" : 6,
		"188" : 11
	}
}
