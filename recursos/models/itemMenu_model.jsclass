model_index = {
	Bind : [ 'startDragging', 'onDragging', 'stopDragging' ],
	Extends : Model,
	childs : [],
	stroke : {
		value : 0,
		inc : 0.05
	},
	position : {
		x : 0,
		y : 0
	},
	DOM : [],
	dragging : false,
	init : function() {
		var DOMContent = new Element('div', {
			'class' : 'node'
		}).hide();
		DOMContent.appendChild(new Element('img', {
			src : this.options.image
		}));

		var DOMShadow = new Element('div', {
			'class' : 'node shadow'
		}).hide();

		var DOMSurfice = new Element('div', {
			'class' : 'node surfice'
		}).hide();
		DOMSurfice.addEvent('click',this.drawChilds.bind(this));

		this.drag = new Drag(DOMSurfice, {
			onStart : this.startDragging.bind(this),
			onDrag : this.onDragging.bind(this),
			onComplete : this.stopDragging.bind(this)
		});

		DOMContent.inject(document.body);
		DOMShadow.inject(document.body);
		DOMSurfice.inject(document.body);
		this.childs = (this.options.childs)?this.options.childs:false;
		this.DOM.push(DOMContent, DOMShadow, DOMSurfice);
		this.stroke.value = .6;
	},
	show : function() {
		this.DOM[0].show();
		this.DOM[1].show();
		this.DOM[2].show();
		this.node = this.options.sys.addNode(this.getID(), {
			model : this
		});
	},
	hide : function() {
		this.DOM[0].hide();
		this.DOM[1].hide();
		this.DOM[2].hide();
		this.options.sys.pruneNode(this.node);
	},
	draw : function() {
		this.show();
	},
	setParent : function(parent) {
		this.parentNode = parent;
	},
	getParent : function() {
		return this.parentNode;
	},
	hideChilds : function(excludeID) {
		if(!this.childs){
			return;
		}
		this.childs.each(function(child) {
			if(!child.model)
				return;
			if (child.model.getID() == excludeID)
				return;
			if(child.edge){
				this.options.sys.pruneEdge(child.edge);
				delete child.edge;
			}
			child.model.hideChilds();
			child.model.hide();
		}.bind(this))
	},
	drawChilds : function() {
		this.node.fixed = false;
		if (this.parentNode)
			this.parentNode.hideChilds(this.getID());
		if(!this.childs)
			return;
		this.childs.each(function(child) {
			if (child.model) {
				child.model.show();
				child.edge = this.options.sys.addEdge(this.node, child.model.node, {
					model : {
						source : this,
						target : child.model
					}
				});
				child.model.hideChilds();
			} else {
				child.model = this.getModel((child.type) ? child.type : 'itemMenu', {
					image : child.image,
					childs : child.childs,
					sys : this.options.sys
				});
				child.model.setParent(this);
				child.model.draw();
				child.edge = this.options.sys.addEdge(this.node, child.model.node, {
					model : {
						source : this,
						target : child.model
					}
				});
			}
		}.bind(this));
	},
	drawLineToChilds: function(){
		ctx.strokeStyle = edge.data.model.target.getStrokeStyle();
		ctx.lineWidth = 5;
		ctx.beginPath();
		ctx.moveTo(edge.data.model.source.center.x, edge.data.model.source.center.y);
		ctx.lineTo(edge.data.model.target.center.x, edge.data.model.target.center.y);
		ctx.stroke();
	},
	startDragging : function() {
		this.dragging = true;
		this.node.fixed = true;
	},
	onDragging : function() {
		this.setCenter(this.getDOMCenter());
	},
	stopDragging : function() {
		this.options.sys.stop();
		this.setCenter(this.getDOMCenter());
		this.node.p = this.options.sys.fromScreen(this.getDOMCenter());
		this.node.fixed = false;
		this.options.sys.start();
		this.dragging = false;
	},
	getName : function() {
		return this.options.name;
	},
	getNode : function() {
		return this.node;
	},
	setNode : function(node) {
		this.node = node;
	},
	getDOMCenter : function() {
		var size = this.DOM[0].getSize();
		var position = this.DOM[2].getPosition();
		return {
			x : position.x + (size.x / 2),
			y : position.y + (size.y / 2)
		};
	},
	updateDOM : function() {
		var size = this.DOM[0].getSize();
		var center = this.center;
		var position = {
			x : this.center.x - (size.x / 2),
			y : this.center.y - (size.y / 2)
		}
		if (!this.dragging) { // Se lo dejo al dragger
			this.DOM[2].setStyles({
				top : position.y,
				left : position.x,
				width : size.x,
				height : size.y
			});
		}
		this.DOM[0].setStyles({
			top : position.y,
			left : position.x
		});
		this.DOM[1].setStyles({
			top : position.y,
			left : position.x,
			width : size.x,
			height : size.y
		});
	},
	setCenter : function() {
		if (this.dragging) {
			this.center = this.getDOMCenter();
			this.node.p = this.options.sys.fromScreen(this.center);
		}
		this.center = this.options.sys.toScreen(this.node.p);
		this.updateDOM();
	}
}