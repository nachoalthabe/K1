model_index = {
	Bind : [ 'startDragging', 'onDragging', 'stopDragging' ],
	Extends : Model,
	options : {
		childs : []
	},
	drawed : false,
	center : false,
	drawedChilds : false,
	stroke : {
		value : 0,
		inc : 0.05
	},
	position : {
		x : 0,
		y : 0
	},
	DOM : [],
	dragging : false,
	init : function() {
		this.getDOMContent();
		var myFx = new Fx.Tween('myElement', {
			duration : 'long',
			transition : 'bounce:out',
			link : 'cancel',
			property : 'height'
		});
		var DOMShadow = new Element('div', {
			'class' : 'node shadow'
		}).hide();

		var DOMSurfice = new Element('div', {
			'class' : 'node surfice'
		}).hide();
		DOMSurfice.addEvent('click', this.click.bind(this));

		this.drag = new Drag(DOMSurfice, {
			onStart : this.startDragging.bind(this),
			onDrag : this.onDragging.bind(this),
			onComplete : this.stopDragging.bind(this),
			preventDefault : true,
			stopPropagation : true
		});
		this.DOMContent.inject($('nodos'));
		DOMShadow.inject($('nodos'));
		DOMSurfice.inject($('nodos'));
		this.DOM.push(this.DOMContent, DOMShadow, DOMSurfice);
	},
	click : function() {
		if(!this.dragging)
			this.drawChilds();
	},
	getDOMContent : function() {
		if (this.DOMContent != undefined)
			return this.DOMContent;
		this.DOMContent = new Element('div', {
			'class' : 'node'
		}).hide();
		this.DOMContent.appendChild(new Element('img', {
			src : this.options.image
		}));
		return this.DOMContent;
	},
	show : function() {
		if(this.drawed)
			return;
		this.drawed = true;
		this.DOM[0].show();
		this.DOM[1].show();
		this.DOM[2].show();
		this.node = this.options.sys.addNode(this.getID(), {
			model : this
		});
	},
	hide : function() {
		if(!this.drawed)
			return;
		this.hideChilds();
		this.drawed = false;
		this.DOM[0].hide();
		this.DOM[1].hide();
		this.DOM[2].hide();
		if (this.node)
			this.options.sys.pruneNode(this.node);
	},
	draw : function() {
		this.show();
	},
	setParent : function(parent) {
		this.parent = parent;
		this.options.childs.each(function(child) {
			var options = {
				canvas : this.options.canvas,
				sys : this.options.sys
			};
			child.model = this.getModel((child.type) ? child.type : 'itemMenu',
					Object.merge(options, child));
			child.model.setParent(this);
		}.bind(this));
	},
	getParent : function() {
		return this.parentNode;
	},
	hideChilds : function(excludeID) {
		this.drawedChilds = false;
		this.options.childs.each(function(child) {
			if (!child.model)
				return;
			if (child.model.getID() == excludeID)
				return;
			if (child.edge) {
				if (child.edge) {
					this.options.sys.pruneEdge(child.edge);
					delete child.edge;
				}
			}
			child.model.hide();
		}.bind(this))
	},
	drawChilds : function() {
		this.node.fixed = true;
		if (this.parent)
			this.parent.hideChilds(this.getID());
		if (!this.options.childs)
			return;
		this.options.childs.each(function(child) {
			child.model.show();
			this.drawedChilds = true;
			child.edge = this.options.sys.addEdge(this.node, child.model.node,
					{
						model : {
							source : this,
							target : child.model
						}
					});
			child.model.hideChilds();
		}.bind(this));
		test = function(){
			this.node.fixed = false;	
		};
		test.delay(1000,this);
	},
	drawLineToChilds : function() {
		if (!this.options.childs)
			return;
		var ctx = this.options.canvas.getContext('2d');
		ctx.strokeStyle = 'rgba(255,255,255,1)';
		ctx.lineWidth = 5;
		this.options.childs.each(function(child) {
			if (child.model == undefined)
				return;
			if (!child.model.drawed)
				return;
			ctx.beginPath();
			ctx.moveTo(this.center.x, this.center.y);
			ctx.lineTo(child.model.center.x, child.model.center.y);
			ctx.stroke();
		}.bind(this));
	},
	startDragging : function() {
		this.dragging = true;
		this.node.fixed = true;
	},
	onDragging : function(ev) {
		this.setCenter(this.getDOMCenter(), true);
	},
	stopDragging : function(ev) {
		this.options.sys.stop();
		this.setCenter(this.getDOMCenter());
		this.node.p = this.options.sys.fromScreen(this.getDOMCenter());
		this.node.fixed = false;
		this.options.sys.start();
		var preventClick = function(){
			this.dragging = false;	
		};
		preventClick.delay(500,this);
		
		
	},
	getName : function() {
		return this.options.name;
	},
	getNode : function() {
		return this.node;
	},
	setNode : function(node) {
		this.node = node;
	},
	getDOMCenter : function() {
		var size = this.DOM[0].getSize();
		var position = this.DOM[2].getPosition();
		return {
			x : position.x + (size.x / 2),
			y : position.y + (size.y / 2)
		};
	},
	updateDOM : function() {
		var size = this.DOM[0].getSize();
		var center = this.center;
		var position = {
			x : this.center.x - (size.x / 2),
			y : this.center.y - (size.y / 2)
		}
		if (!this.dragging) { // Se lo dejo al dragger
			this.DOM[2].setStyles({
				top : position.y,
				left : position.x,
				width : size.x,
				height : size.y
			});
		}
		this.DOM[0].setStyles({
			top : position.y,
			left : position.x
		});
		this.DOM[1].setStyles({
			top : position.y,
			left : position.x,
			width : size.x,
			height : size.y
		});
		// this.drawLineToChilds();
	},
	setCenter : function() {
		if (this.dragging) {
			this.node.p = this.options.sys.fromScreen(this.getDOMCenter());
		}
		this.center = this.options.sys.toScreen(this.node.p);
		this.drawLineToChilds();
		this.updateDOM();
	}
}